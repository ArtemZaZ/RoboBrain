#########################################################################################################################
##### class Event_block - класс события со встроенной функцией(с пустыми параметрами),                              #####
##### которая вызовется при вызове события(элемент класcа должен быть привязан к елементу класса EVENT_MASTER)      #####
##### class EVENT_MASTER - класс, который собирает события со встроенными функциями Event_block в список событий.   #####
##### При вызове каждого события из списка событий заполняет очередь событий, функции привязанные к этим            #####
##### событиям выполняются в порядке очереди в разных потоках.                                                      #####
#########################################################################################################################

import time
import threading


class Event_block():                                                                                
    def __init__(self, Name=None, Fun=None):                                                        # конструктор класса Event_block
        self.name=Name                                                                              # имя события
        self.event=threading.Event()                                                                # событие
        self.foo=Fun                                                                                # функция события
        

    def setFun(self, f):                                                                            # установить функцию события
        self.foo=f

    def push(self):                                                                                 # вызвать событие
        self.event.set() 

    

class EVENT_MASTER(threading.Thread):                                                               
    def __init__(self):                                                                             # конструктор класса EVENT_MASTER
        threading.Thread.__init__(self)
        self.EVENT_LIST=[]                                                                          # список возможных событий, с привязанными ф-ями
        self.EVENT_STEK=[]                                                                          # очередь выполнения функций событий
        self.EXIT_EM=False                                                                          # метка выхода из потока
        
        self.threads=[]                                                                             # список потоков

    

    def run(self):                                                                                  # функция потока E_M
        while not self.EXIT_EM:                                                                     # пока нет метки выхода из потока
            for element in self.EVENT_LIST:                                                         # проход по всем элементам списка событий
                if(element.event.isSet()):                                                          # если какое-то из событий произошло
                    self.EVENT_STEK.append(element)                                                 # заполнить очередь этим событием
                    element.event.clear()                                                           # снять метку события

                if(len(self.EVENT_STEK)>0):                                                         # если очередь не пуста
                    self.threads.append(threading.Thread(target=self.EVENT_STEK.pop(0).foo))        # добавить в список потоков функцию, принадлежащую первому элементу очереди, при этом удаляя его из очереди
                    self.threads.pop(0).start()                                                     # запустить первый элемент списка потоков, при этом удаляя его
            time.sleep(0.05)

    def exit(self):                                                                                 # функция выхода из потока 
        self.EXIT_EM=True

    def append(self, event):                                                                        # добавления нового элемента Event_block в список возможных событий
        self.EVENT_LIST.append(event)





#############################################################################################################
#############################################################################################################
##### Пример программы, использующей эти классы:                                                        #####
#####                                                                                                   #####
##### import event_master                                                                               #####    
#####                                                                                                   #####    
##### def functOK():                                                                                    #####            
#####     i=0                                                                                           #####
#####     while(i<10):                                                                                  #####
#####         print("OK\n")                                                                             #####
#####         i=i+1                                                                                     ##### 
#####                                                                                                   ##### 
##### def functOK1():                                                                                   ##### 
#####     i=0                                                                                           ##### 
#####     while(i<10):                                                                                  ##### 
#####         print("OK1\n")                                                                            ##### 
#####         i=i+1                                                                                     ##### 
#####                                                                                                   ##### 
##### def summ(a,b):                                                                                    ##### 
#####     c=a+b;                                                                                        ##### 
#####     i=0                                                                                           ##### 
#####     while(i<10):                                                                                  ##### 
#####         print(c+i)                                                                                ##### 
#####         i=i+1                                                                                     ##### 
#####                                                                                                   ##### 
##### a1=4                                                                                              ##### 
##### b1=6                                                                                              ##### 
##### def functOK2():                                                                                   ##### 
#####     global a1                                                                                     ##### 
#####     global b1                                                                                     ##### 
#####     summ(a1, b1)                                                                                  ##### 
#####                                                                                                   ##### 
##### EV=event_master.EVENT_MASTER()                                                                    ##### 
##### EV.start()                                                                                        ##### 
#####                                                                                                   ##### 
##### ev=event_master.Event_block()                                                                     ##### 
##### ev1=event_master.Event_block()                                                                    ##### 
##### ev2=event_master.Event_block()                                                                    ##### 
#####                                                                                                   ##### 
##### ev.setFun(functOK)                                                                                ##### 
##### ev1.setFun(functOK1)                                                                              ##### 
##### ev2.setFun(functOK2)                                                                              ##### 
#####                                                                                                   ##### 
##### EV.append(ev)                                                                                     ##### 
##### EV.append(ev1)                                                                                    ##### 
##### EV.append(ev2)                                                                                    ##### 
#####                                                                                                   ##### 
##### ev.push()                                                                                         ##### 
##### ev1.push()                                                                                        ##### 
##### ev2.push()                                                                                        #####
#####                                                                                                   #####        
#############################################################################################################
#############################################################################################################
